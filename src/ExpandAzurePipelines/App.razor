<div style="display: flex; flex-direction: row;">
    <button type="button" class="btn btn-primary" @onclick="EvaluatePipeline">Evaluate&nbsp;Pipeline</button>
    <InputSelect TValue="string" class="form-select" ValueExpression="@(()=>currentTab)" Value="@currentTab" ValueChanged="SwitchTab">
        @foreach (var file in files)
        {
            <option value="@(file.Key)">@file.Key</option>
        }
    </InputSelect>
    <button type="button" class="btn btn-outline-secondary btn-sm" aria-label="New Tab" @onclick="NewTab">➕</button>
    <select class="form-select flex-grow-0 flex-shrink-1" @onchange="ChangeTheme" >
        <option selected value="vs">Visual Studio</option>
        <option value="vs-dark">Visual Studio Dark</option>
        <option value="hc-black">High Contrast Black</option>
    </select>
    <button type="button" class="btn btn-secondary" @onclick="Layout">Layout</button>
</div>
<div>
    <div class="input-group mb-3">
        <input type="text" class="form-control" placeholder="FileName" @bind-value="fileNameInput">
        <button class="btn btn-outline-secondary" type="button" @onclick="SaveContent">Save</button>
        <button class="btn btn-outline-secondary" type="button" @onclick="DeleteFile">Delete</button>
    </div>
</div>

<div style="display: flex; flex-direction: row;">
    <StandaloneCodeEditor @ref="_editor" ConstructionOptions="EditorConstructionOptions" OnDidInit="EditorOnDidInit" OnContextMenu="OnContextMenu" />
    <StandaloneCodeEditor @ref="_editor2" ConstructionOptions="EditorConstructionOptions" OnContextMenu="OnContextMenu" />
</div>

@inject Blazored.LocalStorage.ILocalStorageService localStorage;
@inject IJSRuntime jsRuntime;

@code {
    private StandaloneCodeEditor _editor = null!;
    private StandaloneCodeEditor _editor2 = null!;
    private StandaloneEditorConstructionOptions EditorConstructionOptions(StandaloneCodeEditor editor)
    {
        return new StandaloneEditorConstructionOptions
        {
            Language = "yaml",
            GlyphMargin = true,
            TabSize = 2,
            InsertSpaces = true,
            Minimap = new EditorMinimapOptions { Enabled = false }
        };
    }

    private async Task EditorOnDidInit()
    {
        var i = 0;
        foreach(var key in await localStorage.KeysAsync()) {
            var fileName = key;
            if(key != "pipeline.yml") {
                var prefix = "file://";
                if(!key.StartsWith(prefix)) {
                    continue;
                }
                fileName = key.Substring(prefix.Length);
            }
            var content = await localStorage.GetItemAsStringAsync(key) ?? "";
            files[fileName] = content;
            if(i == 0) {
                fileNameInput = fileName;
                currentFileName = fileName;
                await _editor.SetValue(content);
            }
            i++;
        }
        if(i == 0) {
            currentFileName = "pipeline.yml";
            files[currentFileName] = "";
            fileNameInput = currentFileName;
        }
    }

    private void OnContextMenu(EditorMouseEvent eventArg)
    {
        Console.WriteLine("OnContextMenu : " + System.Text.Json.JsonSerializer.Serialize(eventArg));
    }

    private async Task ChangeTheme(ChangeEventArgs e)
    {
        Console.WriteLine($"setting theme to: {e.Value?.ToString()}");
        await Global.SetTheme(jsRuntime, e.Value?.ToString());
    }

    private async Task Layout()
    {
        await _editor.Layout();
        await _editor2.Layout();
    }

    private async Task EvaluatePipeline() {
        await SyncFile();
        try {
            var content = await _editor.GetValue();
            var context = new Runner.Server.Azure.Devops.Context {
                FileProvider = new DefaultInMemoryFileProviderFileProvider(files.ToArray()),
                TraceWriter = new GitHub.DistributedTask.ObjectTemplating.EmptyTraceWriter(),
                Flags = GitHub.DistributedTask.Expressions2.ExpressionFlags.DTExpressionsV1 | GitHub.DistributedTask.Expressions2.ExpressionFlags.ExtendedDirectives | GitHub.DistributedTask.Expressions2.ExpressionFlags.AllowAnyForInsert
            };
            var template = await AzureDevops.ReadTemplate(context, currentFileName);
            var pipeline = await new Runner.Server.Azure.Devops.Pipeline().Parse(context.ChildContext(template, currentFileName), template);
            var newcontent = pipeline.ToYaml();
            await _editor2.SetValue(newcontent);
        } catch(Exception ex) {
            await _editor2.SetValue(ex.Message);
        }
    }

    private async Task SaveContent() {
        await SyncFile();
        await localStorage.SetItemAsStringAsync("file://" + currentFileName, files[currentFileName]);
        if(currentFileName == "pipeline.yml") {
            await localStorage.RemoveItemAsync(currentFileName);
        }
    }

    private async Task DeleteFile() {
        await SyncFile();
        await localStorage.RemoveItemAsync("file://" + currentFileName);
        if(currentFileName == "pipeline.yml") {
            await localStorage.RemoveItemAsync(currentFileName);
        }
        files.Remove(currentFileName);
        if(files.Count > 0) {
            var newFileName = files.Keys.First();
            currentFileName = newFileName!;
            fileNameInput = currentFileName;
            await _editor.SetValue(files[newFileName]);
        } else {
            currentFileName = "pipeline.yml";
            files[currentFileName] = "";
            fileNameInput = currentFileName;
            await _editor.SetValue("");
        }
    }

    private Dictionary<string, string> files = new Dictionary<string, string>();
    private string currentFileName = "";
    private string fileNameInput = "";

    private async Task SyncFile() {
        if(!string.IsNullOrWhiteSpace(currentFileName)) {
            if(!string.IsNullOrWhiteSpace(fileNameInput) && currentFileName != fileNameInput && !files.ContainsKey(fileNameInput)) {
                files[fileNameInput] = await _editor.GetValue();
                var oldKey = "file://" + currentFileName;
                var val = await localStorage.GetItemAsStringAsync(oldKey);
                if(val != null) {
                    await localStorage.SetItemAsStringAsync("file://" + fileNameInput, val);
                }
                files.Remove(currentFileName);
                await localStorage.RemoveItemAsync(oldKey);
                if(currentFileName == "pipeline.yml") {
                    await localStorage.RemoveItemAsync(currentFileName);
                }
                currentFileName = fileNameInput;
            } else {
                files[currentFileName] = await _editor.GetValue();
            }
        }
    }
    
    private string currentTab = null!;

    private async Task SwitchTab(string value)
    {
        currentTab = value;
        if(!string.IsNullOrWhiteSpace(value)) {
            await SyncFile();
            var newFileName = value;
            currentFileName = newFileName!;
            fileNameInput = currentFileName;
            await _editor.SetValue(files[newFileName]);
        }
    }

    private async Task NewTab()
    {
        await SyncFile();
        await _editor.SetValue("");
        var prefix = "Untitled";
        var suffix = ".yml";
        var def = $"{prefix}{suffix}";
        if(!files.ContainsKey(def)) {
            currentFileName = def;
        } else {
            for(int i = 2; i < 100; i++) {
                var template = $"{prefix} ({i}){suffix}";
                if(!files.ContainsKey(template)) {
                    currentFileName = template;
                    break;
                }
            }
        }
        fileNameInput = currentFileName;
        files[currentFileName] = "";
        currentTab = currentFileName;
    }
}
