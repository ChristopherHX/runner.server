{"version":3,"sources":["containers/Detail/Detail.module.scss","components/MasterDetail/MasterDetail.module.scss","components/Header/Header.module.scss","components/ListItem/ListItem.module.scss","components/ListItemLink/ListItemLink.module.scss","utils/media-queries.model.ts","components/Header/Header.tsx","components/ListItem/ListItem.tsx","components/ListItemLink/ListItemLink.tsx","components/MasterDetail/MasterDetail.tsx","containers/Detail/Detail.tsx","containers/Master/Master.tsx","App.tsx","serviceWorker.js","index.js"],"names":["module","exports","mediaQueries","Header","props","className","styles","header","query","matches","to","back","style","visibility","hideBackButton","title","defaultProps","listItemNoDataMessage","ListItem","component","inner","item","description","ListItemLink","exact","activeClassName","active","MasterDetail","path","useRouteMatch","master","MasterType","masterProps","detail","DetailType","detailProps","listArtifacts","runid","a","artifactUrl","ghHostApiUrl","fetch","response","text","body","JSON","parse","getContainerItems","artifactName","containerUrl","resourceUrl","URL","searchParams","append","toString","DetailContainer","useState","job","setJob","timeline","setTimeline","artifacts","setArtifacts","setTitle","id","useParams","owner","repo","errors","setErrors","updateTitle","jobCompletedEvent","name","result","jobToItem","requestId","timeLineId","useEffect","_","undefined","e","encodeURIComponent","json","length","timelineId","status","newTimeline","shift","value","i","count","element","fileContainerResourceUrl","items","files","source","EventSource","missed","callback","s","find","t","record","stepId","convert","Convert","newline","escapeXML","log","location","content","startLine","console","lines","missingLines","reduce","prev","c","toHtml","line","addEventListener","ev","data","push","oldtimeline","del","splice","state","jobId","close","main","width","onClick","event","method","map","container","file","href","contentLocation","Collapsible","open","openedClassName","triggerClassName","Collapsible__trigger","triggerOpenedClassName","contentOuterClassName","Collapsible__contentOuter","contentInnerClassName","Collapsible__contentInner","trigger","onOpening","busy","item2","logs","split","offset","re","test","substring","currentValue","textAlign","whiteSpace","maxHeight","overflow","fontFamily","dangerouslySetInnerHTML","__html","MasterContainer","url","jobs","setJobs","x","insertp","findIndex","j","filter","unshift","sp","newjobs","sjobs","sort","b","Fragment","workflowname","App","render","from","Boolean","window","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8c0906d1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"component\":\"Detail_component__1VtCU\",\"main\":\"Detail_main__25Z8q\",\"Collapsible\":\"Detail_Collapsible__1Z6Fe\",\"Collapsible__contentInner\":\"Detail_Collapsible__contentInner__20oSV\",\"Collapsible__trigger\":\"Detail_Collapsible__trigger__3EOpG\",\"is-open\":\"Detail_is-open__2aL8y\",\"is-disabled\":\"Detail_is-disabled__wEqIO\",\"Collapsible__custom-sibling\":\"Detail_Collapsible__custom-sibling__3HRWD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"component\":\"MasterDetail_component__154LI\",\"master\":\"MasterDetail_master__mykC2\",\"detail\":\"MasterDetail_detail__1KXQc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1rCD5\",\"back\":\"Header_back__1NWwX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"component\":\"ListItem_component__2wbBh\",\"inner\":\"ListItem_inner__1YzSZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"component\":\"ListItemLink_component__3_vwt\",\"active\":\"ListItemLink_active__IcDqn\"};","export const mediaQueries = {\n    xs: null,\n    sm: null,\n    md: '(max-width: 599px)',\n    lg: null,\n    xl: null\n};  ","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport Media from 'react-media';\nimport { mediaQueries } from 'utils';\nimport styles from './Header.module.scss';\n\nexport interface HeaderProps {\n    title: string,\n    hideBackButton?: boolean\n}\n\nexport const headerEmptyTitle = 'No Title';\n\nexport const Header: React.FC<HeaderProps> = (props) => {\n\n    return (\n        <div className={styles.header}>\n\n            <Media query={mediaQueries.md}>\n                { matches => matches ? (\n                    <Link to=\"../../../../\" className={styles.back}\n                        style={{ visibility: props.hideBackButton ? 'hidden' : 'visible' }}>\n                        Back\n                    </Link>\n                ): (\n                    <div>&nbsp;</div>\n                )}\n            </Media>\n\n            <h1 data-test=\"HeaderTitle\">\n                { props.title || headerEmptyTitle } \n            </h1>\n\n        </div> \n    );\n}\n\nHeader.defaultProps = {\n    hideBackButton: false\n};\n\nexport default Header;","import React from 'react'; \nimport { Item } from 'state';\nimport styles from './ListItem.module.scss';\n\nexport interface ListItemProps {\n    item: Item\n};\n\nexport const listItemNoDataMessage = 'No Data';\n\nexport const ListItem: React.FC<ListItemProps> = (props) => {\n    \n    return (\n        <div className={styles.component}>\n\n            <div className={styles.inner}>\n\n                <h1 data-test=\"ListItemHeading\">\n                    { props.item.title ? props.item.title : listItemNoDataMessage  }\n                </h1> \n\n                <h2 data-test=\"ListItemSubHeading\">\n                    { props.item.description ?  props.item.description : listItemNoDataMessage }\n                </h2>\n\n            </div>\n\n        </div> \n    );\n};\n\nexport default ListItem;","import React from 'react'; \nimport { NavLink } from 'react-router-dom';\nimport { ListItem, ListItemProps } from '../ListItem/ListItem';\nimport styles from './ListItemLink.module.scss';\n\nexport interface ListItemLinkProps extends ListItemProps {\n    to: string\n}\n\nexport const ListItemLink: React.FC<ListItemLinkProps> = (props) => {  \n    return (\n        <NavLink exact to={props.to}\n            className={styles.component}\n            activeClassName={styles.active}>\n            <ListItem {...props} />\n        </NavLink>\n    );\n};\n\nexport default ListItemLink;","import React from 'react';\nimport { Route, Switch, useRouteMatch } from 'react-router-dom';\nimport Media from 'react-media';\nimport { mediaQueries } from 'utils';\nimport styles from './MasterDetail.module.scss';\n\nexport interface MasterDetailProps {\n    MasterType: any,\n    masterProps: any,\n    DetailType:  any,\n    detailProps: any\n}\n\nexport const MasterDetail: React.FC<MasterDetailProps> = (props) => {\n    let { path } = useRouteMatch() as any;\n    const master = (\n        <props.MasterType {...props.masterProps}\n            data-test=\"Master\" />);\n    const detail = (\n        <props.DetailType {...props.detailProps} \n            data-test=\"Detail\" />);\n\n    return ( \n        <Media query={mediaQueries.md}>\n            {matches =>\n                matches ? (\n                    <Switch>\n                        <Route exact path={`${path}`}>\n                            {master}\n                        </Route>\n                        <Route path={`${path}/detail/:id`}>\n                            {detail}\n                        </Route>\n                    </Switch>\n                ) : (\n                    <section className={styles.component}>\n                        <section className={styles.master}>\n                            <Route path={`${path}`}>\n                                {master}\n                            </Route>\n                        </section>\n                        <section className={styles.detail}>\n                            <Switch>\n                                <Route exact path={`${path}`}>\n                                    {detail} \n                                </Route>\n                                <Route path={`${path}/detail/:id`}>\n                                    {detail}\n                                </Route>\n                            </Switch>\n                        </section>\n                    </section>\n                    )\n            }\n        </Media>\n    );\n};","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Header } from 'components';\nimport { IJob, IJobCompletedEvent } from '../../state/store.selectors';\nimport { Item } from '../../state/example.model';\nimport styles from './Detail.module.scss';\nimport Convert from 'ansi-to-html'; \n\nimport Collapsible from 'react-collapsible';\nimport { ghHostApiUrl } from 'settings';\n\nexport interface DetailProps {\n    item: Item | null\n}\n\ninterface ILog {\n    id: number,\n    location: string\n    content: string\n}\n\ninterface ITimeLine {\n    id: string,\n    Type: string,\n    log: ILog | null,\n    order: Number,\n    name: string,\n    busy: boolean,\n    state: string,\n    result: string\n}\n\n// interface IJobEvent {\n//     repo: string,\n//     job: IJob \n// }\n\ninterface ILogline {\n    line : string,\n    lineNumber: number\n}\n\ninterface IRecord {\n    value: string[],\n    stepId: string,\n    startLine: number\n    count: number\n}\n\ninterface ILoglineEvent {\n    recordId: string,\n    record: IRecord\n}\n\ninterface ITimeLineEvent {\n    timeline: ITimeLine[],\n    timelineId: string\n}\n\n\n// Artifacts\n\nexport interface ArtifactResponse {\n    containerId: string\n    size: number\n    signedContent: string\n    fileContainerResourceUrl: string\n    type: string\n    name: string\n    url: string\n\n    files: ContainerEntry[] | null\n  }\n  \n  export interface CreateArtifactParameters {\n    Type: string\n    Name: string\n    RetentionDays?: number\n  }\n  \n  export interface PatchArtifactSize {\n    Size: number\n  }\n  \n  export interface PatchArtifactSizeSuccessResponse {\n    containerId: number\n    size: number\n    signedContent: string\n    type: string\n    name: string\n    url: string\n    uploadUrl: string\n  }\n  \n  export interface UploadResults {\n    uploadSize: number\n    totalSize: number\n    failedItems: string[]\n  }\n  \n  export interface ListArtifactsResponse {\n    count: number\n    value: ArtifactResponse[]\n  }\n  \n  export interface QueryArtifactResponse {\n    count: number\n    value: ContainerEntry[]\n  }\n  \n  export interface ContainerEntry {\n    containerId: number\n    scopeIdentifier: string\n    path: string\n    itemType: string\n    status: string\n    fileLength?: number\n    fileEncoding?: number\n    fileType?: number\n    dateCreated: string\n    dateLastModified: string\n    createdBy: string\n    lastModifiedBy: string\n    itemLocation: string\n    contentLocation: string\n    fileId?: number\n    contentId: string\n  }\n\n/**\n * Gets a list of all artifacts that are in a specific container\n */\nasync function listArtifacts(runid : number): Promise<ListArtifactsResponse> {\nconst artifactUrl = ghHostApiUrl + \"/runner/host/_apis/pipelines/workflows/\" + runid + \"/artifacts\"\n\nconst response = await fetch(artifactUrl);\nconst body: string = await response.text()\nreturn JSON.parse(body)\n}\n\n/**\n   * Fetches a set of container items that describe the contents of an artifact\n   * @param artifactName the name of the artifact\n   * @param containerUrl the artifact container URL for the run\n   */\n async function getContainerItems(\n    artifactName: string,\n    containerUrl: string\n  ): Promise<QueryArtifactResponse> {\n    // the itemPath search parameter controls which containers will be returned\n    const resourceUrl = new URL(containerUrl)\n    resourceUrl.searchParams.append('itemPath', artifactName)\n\n    const response = await fetch(resourceUrl.toString());\n    const body: string = await response.text()\n    return JSON.parse(body)\n  }\n\n// End Artifacts\n\n\nexport const DetailContainer : React.FC<DetailProps> = (props) => {\n    const [ job, setJob ] = useState<IJob | null>(null);\n    const [ timeline, setTimeline ] = useState<ITimeLine[]>([]);\n    const [ artifacts, setArtifacts ] = useState<ArtifactResponse[]>([]);\n    const [ title, setTitle] = useState<string>(\"Loading...\");\n    const { id } = useParams<{id: string}>();\n    const { owner, repo } = useParams<{owner: string, repo: string}>();\n    const [ errors, setErrors] = useState<string[]>([]);\n    var updateTitle = (job: IJob) => {\n        setTitle(job.jobCompletedEvent ? \"Job \" + job.name + \" completed with result: \" + job.jobCompletedEvent.result : job.name);\n    }\n    var jobToItem = (job: IJob) : { item: Item | null, job: IJob | null } => { return { item: { id: job.requestId, title: job.name, description: job.timeLineId },job: job}};\n    useEffect(() => {\n        (async () => {\n            try {\n                setArtifacts(_ => []);\n                if(id === undefined) {\n                    setJob(null);\n                    setTitle(\"Please select a Job\");\n                    setTimeline(e => []);\n                    setErrors([]);\n                    return;\n                }\n                var job : IJob | null = await (await (await fetch(ghHostApiUrl + \"/\" + owner + \"/\" + repo + \"/_apis/v1/Message?jobid=\" + encodeURIComponent(id), { })).json());\n                setJob(job);\n                updateTitle(job);\n                var query = jobToItem(job);\n                if(query.job.errors !== null && query.job.errors.length > 0) {\n                    setErrors(query.job.errors);\n                } else {\n                    setErrors([]);\n                }\n                const item = query.item;\n                const timelineId = item ? item.description : null;\n                if(timelineId != null) {\n                    var timeline = await fetch(ghHostApiUrl + \"/\" + owner + \"/\" + repo + \"/_apis/v1/Timeline/\" + timelineId, { });\n                    if(timeline.status === 200) {\n                        var newTimeline = await timeline.json() as ITimeLine[];\n                        if(newTimeline != null && newTimeline.length > 1) {\n                            newTimeline.shift()\n                            setTimeline(newTimeline);\n                        } else {\n                            setTimeline([]);\n                        }\n                    } else {\n                        setTitle((query.job.errors !== null && query.job.errors.length > 0) ? \"Job \" + query.job.name + \" failed to run\" : (query.job.jobCompletedEvent ? \"Job \" + query.job.name + \" completed with result: \" + query.job.jobCompletedEvent.result : \"Wait for job \" + query.job.name + \" to run...\"));\n                        setTimeline(e => []);\n                    }\n                }\n                if(query.job.runid !== -1) {\n                    var artifacts = await listArtifacts(query.job.runid);\n                    if(artifacts.value !== undefined) {\n                        for (let i = 0; i < artifacts.count; i++) {\n                            const element = artifacts.value[i];\n                            var items = await getContainerItems(element.name, element.fileContainerResourceUrl)\n                            if(items !== undefined) {\n                                element.files = items.value \n                            }\n                        }\n                        setArtifacts(_ => artifacts.value);\n                    }\n                }\n            } catch(err) {\n                setJob(null);\n                setTitle(\"Error: \" + err);\n                setTimeline(e => []);\n                setErrors([]);\n            }\n        })();\n    }, [id, owner, repo])\n    useEffect(() => {\n        if(job != null) {\n            var item = jobToItem(job).item;\n            if(item !== null && item.description && item.description !== '' && item.description !== \"00000000-0000-0000-0000-000000000000\") {\n                var source = new EventSource(ghHostApiUrl + \"/\" + owner + \"/\" + repo + \"/_apis/v1/TimeLineWebConsoleLog?timelineId=\"+ item.description);\n                try {\n                    var missed : ILoglineEvent[] = [];\n                    var callback = function(timeline, e:ILoglineEvent) {\n                        var s = timeline.find(t => t.id === e.record.stepId);\n                        var convert = new Convert({\n                            newline: true,\n                            escapeXML: true\n                        });\n                        if(s) {\n                            if(s.log == null) {\n                                s.log = { id:-1, location: null, content: \"\"};\n                                if(e.record.startLine > 1) {\n                                    (async () => {\n                                        console.log(\"Downloading previous log lines of this step...\");\n                                        var lines = await fetch(ghHostApiUrl + \"/\" + owner + \"/\" + repo + \"/_apis/v1/TimeLineWebConsoleLog/\" + item.description + \"/\" + e.record.stepId, { });\n                                        if(lines.status === 200) {\n                                            var missingLines = await lines.json() as ILogline[];\n                                            missingLines.length = e.record.startLine - 1;\n                                            s.log.content = missingLines.reduce((prev: string, c : ILogline) => (prev.length > 0 ? prev + \"<br/>\" : \"\") + convert.toHtml(c.line), \"\") + s.log.content;\n                                        } else {\n                                            console.log(\"No logs to download..., currently fixes itself\");\n                                        }\n                                    })();\n                                }\n                            }\n                            if (s.log.id === -1) {\n                                s.log.content = e.record.value.reduce((prev: string, c : string) => (prev.length > 0 ? prev + \"<br/>\" : \"\") + convert.toHtml(c), s.log.content);\n                            }\n                            return true;\n                        }\n                        return false;\n                    }\n                    source.addEventListener (\"log\", (ev : MessageEvent) => {\n                        console.log(\"new logline \" + ev.data);\n                        var e = JSON.parse(ev.data) as ILoglineEvent;\n                        setTimeline(timeline => {\n                            if(callback(timeline, e)) {\n                                return [...timeline];\n                            }\n                            missed.push(e);\n                            return timeline;\n                        });\n                    });\n                    source.addEventListener (\"timeline\", (ev : MessageEvent) => {\n                        var e = JSON.parse(ev.data) as ITimeLineEvent;\n                        setTitle(e.timeline.shift().name);\n                        setTimeline(oldtimeline => {\n                            var del = e.timeline.splice(0, oldtimeline.length)\n                            for (let i = 0; i < del.length; i++) {\n                                oldtimeline[i].result = del[i].result;\n                                oldtimeline[i].state = del[i].state;\n                            }\n                            if(e.timeline.length === 0) {\n                                // Todo Merge Timelines here\n                                return oldtimeline;\n                            }\n                            var timeline = [...oldtimeline, ...e.timeline]\n                            for (; missed.length > 0;) {\n                                if(callback(timeline, missed[0])) {\n                                    missed.shift();\n                                } else {\n                                    break;\n                                }\n                            }\n                            return timeline;\n                        });\n                        // console.log(ev.data)\n                    });\n                    source.addEventListener(\"finish\", (ev : MessageEvent) => {\n                        var e = JSON.parse(ev.data) as IJobCompletedEvent;\n                        if(e.jobId === id) {\n                            (async function() {\n                                job.jobCompletedEvent = e;\n                                updateTitle(job);\n                            })()\n                        }\n                    });\n                } finally {\n                    return () => {\n                        source.close();\n                    }\n                }\n            }\n        }\n        return () => {}\n    }, [id, job, owner, repo]);\n\n    return (\n        <section className={styles.component}>\n        <Header title={title} />\n        <main className={styles.main}>\n            <div className={styles.text} style={{width: '100%'}}>\n                {(() => {\n                    if(job !== undefined && job != null) {\n                        if(!job.jobCompletedEvent && (!job.errors || job.errors.length === 0)) {\n                            return  <button onClick={(event) => {\n                                (async () => {\n                                    await fetch(ghHostApiUrl + \"/\" + owner + \"/\" + repo + \"/_apis/v1/Message/cancel/\" + job.jobId, { method: \"POST\" });\n                                })();\n                            }}>Cancel</button>;\n                        } else {\n                            return  <div><button onClick={(event) => {\n                                (async () => {\n                                    await fetch(ghHostApiUrl + \"/\" + owner + \"/\" + repo + \"/_apis/v1/Message/rerunworkflow/\" + job.runid, { method: \"POST\" });\n                                })();\n                            }}>Rerun Workflow</button><button onClick={(event) => {\n                                (async () => {\n                                    await fetch(ghHostApiUrl + \"/\" + owner + \"/\" + repo + \"/_apis/v1/Message/rerun/\" + job.jobId, { method: \"POST\" });\n                                })();\n                            }}>Rerun</button></div>;\n                        }\n                    }\n                })()\n                }\n                \n                {errors.map(e => <div>Error: {e}</div>)}\n                {artifacts.map((container: ArtifactResponse) => <div><div>{container.name}</div>{(() => {\n                    if(container.files !== undefined) {\n                        return container.files.map(file => <div><a href={file.contentLocation}>{file.path}</a></div>);\n                    }\n                    return <div/>;\n                })()}</div>)}\n                {timeline.map((item: ITimeLine) =>\n                    <Collapsible key={id + item.id} className={styles.Collapsible} open={false} openedClassName={styles.Collapsible} triggerClassName={styles.Collapsible__trigger} triggerOpenedClassName={styles.Collapsible__trigger + \" \" + styles[\"is-open\"]} contentOuterClassName={styles.Collapsible__contentOuter} contentInnerClassName={styles.Collapsible__contentInner} trigger={(item.result == null ? item.state == null ? \"Waiting\" : item.state  : item.result) + \" - \" + item.name} onOpening={() => {\n                        if(!item.busy && (item.log == null || (item.log.id !== -1 && (!item.log.content || item.log.content.length === 0)))) {\n                            item.busy = true;\n                            (async() => {\n                                try {\n                                    var convert = new Convert({\n                                        newline: true,\n                                        escapeXML: true\n                                    });\n                                    if(item.log == null) {\n                                        console.log(\"Downloading previous log lines of this step...\");\n                                        const item2 = jobToItem(job).item;\n                                        var logs = await fetch(ghHostApiUrl + \"/\" + owner + \"/\" + repo + \"/_apis/v1/TimeLineWebConsoleLog/\" + item2.description + \"/\" + item.id, { });\n                                        if(logs.status === 200) {\n                                            var missingLines = await logs.json() as ILogline[];\n                                            item.log = { id: -1, location: null, content: missingLines.reduce((prev: string, c : ILogline) => (prev.length > 0 ? prev + \"<br/>\" : \"\") + convert.toHtml(c.line), \"\") };\n                                        } else {\n                                            console.log(\"No logs to download...\");\n                                        }\n                                    } else {\n                                        const log = await (await fetch(ghHostApiUrl + \"/\" + owner + \"/\" + repo + \"/_apis/v1/Logfiles/\" + item.log.id, { })).text();\n                                        var lines = log.split('\\n');\n                                        var offset = '2021-04-02T15:50:14.6619714Z '.length;\n                                        var re = /^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}.[0-9]{7}Z /;\n                                        lines[0] = convert.toHtml(re.test(lines[0]) ? lines[0].substring(offset) : lines[0]);\n                                        item.log.content = lines.reduce((prev, currentValue) => (prev.length > 0 ? prev + \"<br/>\" : \"\") + convert.toHtml(re.test(currentValue) ? currentValue.substring(offset) : currentValue));\n                                    }\n                                } finally {\n                                    item.busy = false;\n                                    // that.forceUpdate();\n                                    setTimeline((t) => {\n                                        return [...t];\n                                    });\n                                }\n                            })();\n                        }\n                    }}>\n                        <div style={{ textAlign: 'left', whiteSpace: 'pre', maxHeight: '100%', overflow: 'auto', fontFamily: \"SFMono-Regular,Consolas,Liberation Mono,Menlo,monospace\" }} dangerouslySetInnerHTML={{ __html: item.log != null ? item.log.content : \"Nothing here\" }}></div>\n                    </Collapsible>\n                )}\n            </div>\n        </main>\n        </section>\n    );\n};","import React, {useState,useEffect} from 'react';\nimport { useRouteMatch } from 'react-router-dom';\nimport { Header, ListItemLink } from 'components';\nimport { Items } from 'state';\nimport { ghHostApiUrl } from 'settings';\n\nexport interface MasterProps extends Items {\n}\ninterface IJob {\n    jobId: string,\n    requestId: number,\n    timeLineId: string,\n    name: string,\n    repo: string\n    workflowname: string\n    runid : number\n}\ninterface IJobEvent {\n    repo: string,\n    job: IJob \n}\n\nexport const MasterContainer: React.FC<MasterProps> = (props) => {\n    let { url } = useRouteMatch();\n    const [ jobs, setJobs ] = useState<IJob[]>([]);\n    const owner = \"runner\";\n    const repo = \"runner\";\n    useEffect(() => {\n        var source = new EventSource(ghHostApiUrl + \"/\" + owner + \"/\" + repo + \"/_apis/v1/Message/event?filter=**\");\n        source.addEventListener(\"job\", ev => {\n            var je = JSON.parse((ev as MessageEvent).data) as IJobEvent;\n            var x = je.job;\n            setJobs(jobs => {\n                var insertp = jobs.findIndex(j => j.requestId < x.requestId)\n                var r = jobs.filter((j) => j.requestId < x.requestId);\n                r.unshift(x);\n                var sp = jobs.splice(insertp);\n                return [...jobs, x, ...sp];\n            });\n        });\n        var apiUrl = ghHostApiUrl + \"/\" + owner + \"/\" + repo + \"/_apis/v1/Message\";\n        (async () => {\n            var newjobs = JSON.parse((await (await fetch(apiUrl, { })).text())) as IJob[];\n            var sjobs = newjobs.sort((a, b) => b.requestId - a.requestId);\n            setJobs(jobs => {\n                return sjobs;\n            });\n        })();\n    }, [])\n    return (\n        <React.Fragment>\n            <Header title=\"Jobs\" hideBackButton={true}/>\n            <ul>\n                {jobs.map((x: IJob) =>\n                    <li key={x.jobId}>\n                        <ListItemLink \n                            to={`${url}/detail/${encodeURIComponent(x.jobId)}`} item={{ id:  x.requestId, title: x.name, description: x.workflowname + \" - \" + x.repo + \" - \" + x.requestId }} />\n                    </li>\n                )}\n            </ul>\n        </React.Fragment>\n    );\n};\n\n","import React from 'react';\nimport { HashRouter as Router, Route, Switch, Redirect } from 'react-router-dom';\nimport { MasterDetail } from 'components';\nimport { MasterContainer, DetailContainer } from 'containers';\n\nexport const App = () => {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/master/:owner/:repo\"\n          render={props => (\n            <MasterDetail MasterType={MasterContainer} masterProps={{}} \n                          DetailType={DetailContainer} detailProps={{}}/>\n          )} />\n        <Redirect exact from=\"/\" to=\"/master/runner/server\" />\n      </Switch>\n    </Router>\n  );\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}